// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    public static FriendsOfDT.Controllers.AbstractController Abstract = new FriendsOfDT.Controllers.T4MVC_AbstractController();
    public static FriendsOfDT.Controllers.AccountsController Accounts = new FriendsOfDT.Controllers.T4MVC_AccountsController();
    public static FriendsOfDT.Controllers.AdminController Admin = new FriendsOfDT.Controllers.T4MVC_AdminController();
    public static FriendsOfDT.Controllers.DirectoryController Directory = new FriendsOfDT.Controllers.T4MVC_DirectoryController();
    public static FriendsOfDT.Controllers.PublicController Public = new FriendsOfDT.Controllers.T4MVC_PublicController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes), protocol, hostName, fragment);
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol, hostName, fragment, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary());
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result, string protocol = null, string hostName = null) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary(), protocol, hostName);
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? ""); 
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult {
    public T4MVC_ViewResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_RedirectToRouteResult : System.Web.Mvc.RedirectToRouteResult, IT4MVCActionResult {
    public T4MVC_RedirectToRouteResult(string area, string controller, string action): base(" ", default(System.Web.Routing.RouteValueDictionary), default(bool))  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_RenderJsonResult : FriendsOfDT.RenderJsonResult, IT4MVCActionResult {
    public T4MVC_RenderJsonResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string fodt_common_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fodt.common.min.js") ? Url("fodt.common.min.js") : Url("fodt.common.js");
                      
        public static readonly string fodt_forms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fodt.forms.min.js") ? Url("fodt.forms.min.js") : Url("fodt.forms.js");
                      
        public static readonly string fodt_slideshowController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fodt.slideshowController.min.js") ? Url("fodt.slideshowController.min.js") : Url("fodt.slideshowController.js");
                      
        public static readonly string fodt_tables_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fodt.tables.min.js") ? Url("fodt.tables.min.js") : Url("fodt.tables.js");
                      
        public static readonly string jsrender_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jsrender.min.js") ? Url("jsrender.min.js") : Url("jsrender.js");
                      
        public static readonly string nfvalidate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nfvalidate.min.js") ? Url("nfvalidate.min.js") : Url("nfvalidate.js");
                      
        public static readonly string site_min_js = Url("site.min.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string base_min_css = Url("base-min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Content/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_css = Url("bootstrap.css");
        }
    
        public static readonly string fodt_forms_css = Url("fodt-forms.css");
        public static readonly string fodt_main_css = Url("fodt-main.css");
        public static readonly string fodt_slideshow_css = Url("fodt-slideshow.css");
        public static readonly string fodt_tables_css = Url("fodt-tables.css");
        public static readonly string fonts_min_css = Url("fonts-min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ajax_loader_gif = Url("ajax-loader.gif");
            public static readonly string bulletRelatedLinks_gif = Url("bulletRelatedLinks.gif");
            public static readonly string fb_icon_gif = Url("fb-icon.gif");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class layout {
                private const string URLPATH = "~/Content/images/layout";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string home_bg_jpg = Url("home-bg.jpg");
                public static readonly string home_header_png = Url("home-header.png");
                public static readonly string inside_bg_jpg = Url("inside-bg.jpg");
                public static readonly string inside_header_png = Url("inside-header.png");
                public static readonly string logo_png = Url("logo.png");
            }
        
            public static readonly string rss_icon_gif = Url("rss-icon.gif");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class slider {
                private const string URLPATH = "~/Content/images/slider";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string slider_fodt_jpg = Url("slider-fodt.jpg");
                public static readonly string slider_football_jpg = Url("slider-football.jpg");
            }
        
            public static readonly string twitter_icon_gif = Url("twitter-icon.gif");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string glyphicons_halflings_white_png = Url("glyphicons-halflings-white.png");
            public static readonly string glyphicons_halflings_png = Url("glyphicons-halflings.png");
        }
    
        public static readonly string reset_min_css = Url("reset-min.css");
        public static readonly string site_min_css = Url("site.min.css");
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}


namespace FriendsOfDT.Controllers {
    public partial class AbstractController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AbstractController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AbstractController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AbstractController Actions { get { return MVC.Abstract; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Abstract";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AbstractController: FriendsOfDT.Controllers.AbstractController {
        public T4MVC_AbstractController() : base(Dummy.Instance) { }

    }
}

namespace FriendsOfDT.Controllers {
    public partial class AccountsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AccountsController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AccountsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult Login() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.Login);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult RegisterNewWebAccount() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.RegisterNewWebAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult VerifyWebAccount() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.VerifyWebAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult DisableWebAccount() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.DisableWebAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult EnableWebAccount() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.EnableWebAccount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult ListAccounts() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.ListAccounts);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Manage() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Manage);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Link() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Link);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AccountsController Actions { get { return MVC.Accounts; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Accounts";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Required = "Required";
            public readonly string SignOut = "SignOut";
            public readonly string Login = "Login";
            public readonly string SignUp = "SignUp";
            public readonly string RegisterNewWebAccount = "RegisterNewWebAccount";
            public readonly string VerifyWebAccount = "VerifyWebAccount";
            public readonly string DisableWebAccount = "DisableWebAccount";
            public readonly string EnableWebAccount = "EnableWebAccount";
            public readonly string AdminList = "AdminList";
            public readonly string ListAccounts = "ListAccounts";
            public readonly string Manage = "Manage";
            public readonly string Link = "Link";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string AdminList = "~/Views/Accounts/AdminList.cshtml";
            public readonly string Link = "~/Views/Accounts/Link.cshtml";
            public readonly string Manage = "~/Views/Accounts/Manage.cshtml";
            public readonly string Required = "~/Views/Accounts/Required.cshtml";
            public readonly string SignUp = "~/Views/Accounts/SignUp.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AccountsController: FriendsOfDT.Controllers.AccountsController {
        public T4MVC_AccountsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Required() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Required);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectToRouteResult SignOut() {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.SignOut);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult Login(string emailAddress, string password, bool persist, string returnUrl) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.Login);
            callInfo.RouteValueDictionary.Add("emailAddress", emailAddress);
            callInfo.RouteValueDictionary.Add("password", password);
            callInfo.RouteValueDictionary.Add("persist", persist);
            callInfo.RouteValueDictionary.Add("returnUrl", returnUrl);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult SignUp() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.SignUp);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult RegisterNewWebAccount(FriendsOfDT.Models.Accounts.RegisterNewAccountParameters parameters) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.RegisterNewWebAccount);
            callInfo.RouteValueDictionary.Add("parameters", parameters);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult VerifyWebAccount(long webAccountId) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.VerifyWebAccount);
            callInfo.RouteValueDictionary.Add("webAccountId", webAccountId);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult DisableWebAccount(long webAccountId) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.DisableWebAccount);
            callInfo.RouteValueDictionary.Add("webAccountId", webAccountId);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult EnableWebAccount(long webAccountId) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.EnableWebAccount);
            callInfo.RouteValueDictionary.Add("webAccountId", webAccountId);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult AdminList() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.AdminList);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult ListAccounts(int? page, int? itemsPerPage) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.ListAccounts);
            callInfo.RouteValueDictionary.Add("page", page);
            callInfo.RouteValueDictionary.Add("itemsPerPage", itemsPerPage);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Manage(long id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Manage);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Link(long id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Link);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

    }
}

namespace FriendsOfDT.Controllers {
    public partial class AdminController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdminController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AdminController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdminController Actions { get { return MVC.Admin; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Admin";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string Dashboard = "Dashboard";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Dashboard = "~/Views/Admin/Dashboard.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AdminController: FriendsOfDT.Controllers.AdminController {
        public T4MVC_AdminController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.RedirectToRouteResult Index() {
            var callInfo = new T4MVC_RedirectToRouteResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Dashboard() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Dashboard);
            return callInfo;
        }

    }
}

namespace FriendsOfDT.Controllers {
    public partial class DirectoryController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DirectoryController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DirectoryController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult Search() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.Search);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult ListProfiles() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.ListProfiles);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendsOfDT.RenderJsonResult RegisterNewProfile() {
            return new T4MVC_RenderJsonResult(Area, Name, ActionNames.RegisterNewProfile);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Manage() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Manage);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DirectoryController Actions { get { return MVC.Directory; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Directory";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
            public readonly string Search = "Search";
            public readonly string ViewProfile = "ViewProfile";
            public readonly string AdminList = "AdminList";
            public readonly string AdminNew = "AdminNew";
            public readonly string ListProfiles = "ListProfiles";
            public readonly string RegisterNewProfile = "RegisterNewProfile";
            public readonly string Manage = "Manage";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string AdminList = "~/Views/Directory/AdminList.cshtml";
            public readonly string AdminNew = "~/Views/Directory/AdminNew.cshtml";
            public readonly string Index = "~/Views/Directory/Index.cshtml";
            public readonly string Manage = "~/Views/Directory/Manage.cshtml";
            public readonly string ViewProfile = "~/Views/Directory/ViewProfile.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_DirectoryController: FriendsOfDT.Controllers.DirectoryController {
        public T4MVC_DirectoryController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult Search(string lastName, string firstName, int? maxResults) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.Search);
            callInfo.RouteValueDictionary.Add("lastName", lastName);
            callInfo.RouteValueDictionary.Add("firstName", firstName);
            callInfo.RouteValueDictionary.Add("maxResults", maxResults);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ViewProfile() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ViewProfile);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult AdminList() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.AdminList);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult AdminNew() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.AdminNew);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult ListProfiles(int? page, int? itemsPerPage) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.ListProfiles);
            callInfo.RouteValueDictionary.Add("page", page);
            callInfo.RouteValueDictionary.Add("itemsPerPage", itemsPerPage);
            return callInfo;
        }

        public override FriendsOfDT.RenderJsonResult RegisterNewProfile(FriendsOfDT.Models.Directory.RegisterNewProfileParameters parameters, bool ignoreMatches) {
            var callInfo = new T4MVC_RenderJsonResult(Area, Name, ActionNames.RegisterNewProfile);
            callInfo.RouteValueDictionary.Add("parameters", parameters);
            callInfo.RouteValueDictionary.Add("ignoreMatches", ignoreMatches);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Manage(long id) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Manage);
            callInfo.RouteValueDictionary.Add("id", id);
            return callInfo;
        }

    }
}

namespace FriendsOfDT.Controllers {
    public partial class PublicController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PublicController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PublicController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PublicController Actions { get { return MVC.Public; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Public";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = "Index";
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Index = "~/Views/Public/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_PublicController: FriendsOfDT.Controllers.PublicController {
        public T4MVC_PublicController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

    }
}

namespace T4MVC {
    public class SharedController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Layout = "~/Views/Shared/_Layout.cshtml";
            public readonly string _Layout_Home = "~/Views/Shared/_Layout_Home.cshtml";
            public readonly string AdminTabs = "~/Views/Shared/AdminTabs.cshtml";
            public readonly string CommonFoot = "~/Views/Shared/CommonFoot.cshtml";
            public readonly string CommonHead = "~/Views/Shared/CommonHead.cshtml";
            public readonly string CommonSidebar = "~/Views/Shared/CommonSidebar.cshtml";
            public readonly string Error = "~/Views/Shared/Error.cshtml";
            public readonly string NavigationControls = "~/Views/Shared/NavigationControls.cshtml";
        }
    }

}




#endregion T4MVC
#pragma warning restore 1591


